---
title: "Candlestick Pattern Recognition Enhanced MACD-ATR Strategy for Cryptocurrency Trading"
format:
  html:
    toc: true
    code-fold: false
    code-tools: false
    theme: cosmo
    embed-resources: true
    smooth-scroll: true
    df-print: paged
jupyter: python3
kernel: venv
execute:
  echo: false
---

:::{.cell}
<style>
/* 图片、表格、图表统一上下留空 */
img, table, .plotly-graph-div {
  margin-top: 20px;
  margin-bottom: 20px;
}

/* 缩小饼图大小 */
.plotly-graph-div .slice path {
  transform: scale(0.8); /* 80% 缩放 */
  transform-origin: center;
}
</style>
:::

**Authors**: Zhe Niu (M.S. FinTech), Haocheng Ni (M.S. ECE), Chenyuan Lei (M.S. ECE) – Duke University

# Trading Strategy & Plan

This project presents a candlestick pattern-enhanced MACD and ATR strategy that detects market microstructure patterns and swing trends in the cryptocurrency market. We combine rule-based indicators (MACD, ATR, EMA) with a CNN classifier trained to recognize candlestick pattern windows. The goal is to improve entry/exit accuracy in BTC/USDT trading through deep learning-enhanced pattern recognition.

## Candlestick Pattern System for Market Trend Recognition

Understanding and classifying **Japanese candlestick patterns** is critical for interpreting trader sentiment and anticipating future price movements. The chart below presents a comprehensive taxonomy of **bullish**, **bearish**, and **neutral** candlestick configurations widely used in technical analysis. These patterns serve as visual signals for **trend reversals** and **continuations** in volatile markets like cryptocurrency.

Recent research by Mersal et al. (2025) demonstrates that integrating **61 distinct candlestick patterns** with **CNN-based classification systems** can drastically enhance the precision of market trend prediction. Their work applies a **sliding window segmentation** and **TA-Lib pattern recognition** to extract structured features from OHLC charts, followed by **CNN training** to classify bullish/bearish trends. Their approach achieved up to **99.3% accuracy**, far exceeding traditional strategies.

This strategy draws inspiration from their methodology by using candlestick chart windows labeled with directional trends, validated with moving averages and additional technical indicators. These patterns—such as the **Morning Star**, **Engulfing**, **Doji**, and **Shooting Star**—provide reliable inputs for deep learning models, enabling the detection of microstructure signals across 15-minute intervals.

![](source/candlestick.jpg){width=800px}

_Reference_: Mersal, E.R., Karaoğlan, K.M., Kutucu, H. (2025). *Enhancing market trend prediction using convolutional neural networks on Japanese candlestick patterns*. [PeerJ Comp. Sci.](https://doi.org/10.7717/peerj-cs.2719)

## Core Strategy Concepts

Our strategy is based on the following key elements:

- **MACD Trend Signals**: Using MACD histogram and signal line crossovers to confirm trend changes
- **EMA Price Position**: Price location relative to EMA30 to determine overall trend direction
- **ATR Dynamic Stop-Loss**: Adaptive adjustment of stop-loss levels based on market volatility
- **Visual Pattern Recognition**: Using CNN deep learning models to identify candlestick patterns
- **Signal Confirmation Mechanism**: Requiring multiple consecutive signals before executing trades to reduce false breakouts

## Trading Process Breakdown

### Step 1: Entry Signal
- MACD histogram turns positive (uptrend)
- Price is above the EMA30 moving average
- CNN model predicts an "uptrend"
- At least 2 consecutive confirmation signals
- **When conditions are met, buy at the current price**

### Step 2: Stop-Loss Setting
- Initial stop-loss = Current price - (3.2 × ATR value)
- As price increases, stop-loss level tracks upward (trailing stop)

### Step 3: Exit Signal
- MACD histogram turns negative (downtrend)
- Price falls below EMA30
- CNN model predicts "downtrend"
- At least 2 consecutive confirmations
Or: Price hits trailing stop-loss level

### Risk Management Rules
- Initial capital: $1,000,000 USD
- Use all capital per trade
- Trailing stops to lock in profit
- Confirm multiple signals before executing

### Candlestick Pattern Classification with CNN

This project uses **CNNs** to classify candlestick chart patterns into bullish or bearish trends, automating the detection of key **reversal signals** in BTC/USDT trading. Over 60 TA-Lib functions are applied to extract meaningful windows, which are converted into chart images with SMA overlays and trend labels.

The model learns visual features through stacked layers and achieves a test accuracy of **99.3%**.

---

# Backtest Setup

- Data: BTC/USDT 15-minute candles (January–April 2025)
- Indicators: MACD(12,26,9), EMA(30), ATR(14)
- Model: CNN classifier, input size 150×150

---

# Trade Records (Blotter)

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from IPython.display import display, HTML

blotter = pd.read_csv('source/blotter.csv')
blotter['timestamp'] = pd.to_datetime(blotter['timestamp'])

html_table = blotter.to_html(index=False, classes="table table-striped table-hover", border=1)
scrollable = f"""
<div style="overflow-x: auto; max-height: 500px;">
  {html_table}
</div>
"""
display(HTML("<h4>Trade Record Table</h4>" + scrollable))

win_trades = (blotter['profit_percent'] > 0).sum()
loss_trades = (blotter['profit_percent'] < 0).sum()
win_rate = win_trades / (win_trades + loss_trades) if win_trades + loss_trades > 0 else 0

fig = go.Figure(data=[go.Pie(
    labels=['Profitable Trades', 'Loss Trades'],
    values=[win_trades, loss_trades],
    hole=0.4,
    marker_colors=['rgba(0, 255, 0, 0.6)', 'rgba(255, 0, 0, 0.6)']
)])
fig.update_layout(
    title=f'Trade Win Rate Analysis: {win_rate:.2%}',
    annotations=[dict(text=f'{win_rate:.2%}', x=0.5, y=0.5, font_size=20, showarrow=False)]
)
fig.show()

blotter['cumulative_return'] = (1 + blotter['profit_percent'] / 100).cumprod() - 1
fig = px.line(
    blotter,
    x='timestamp',
    y='cumulative_return',
    title='Strategy Cumulative Return',
    labels={'timestamp': 'Date', 'cumulative_return': 'Cumulative Return'},
    template='plotly_white'
)
fig.update_layout(yaxis_tickformat='.2%', yaxis_hoverformat='.2%')
fig.show()
```

---

# Account Overview (Ledger)

```{python}
ledger = pd.read_csv('source/ledger.csv')
ledger['timestamp'] = pd.to_datetime(ledger['timestamp'])

html_table = ledger.to_html(index=False, classes="table table-bordered", border=1)
display(HTML("<h4>Ledger Table</h4><div style='overflow-x:auto; max-height:500px;'>" + html_table + "</div>"))

fig = px.line(
    ledger,
    x='timestamp',
    y='market_value',
    title='Account Equity Curve',
    labels={'timestamp': 'Date', 'market_value': 'Account Value (USD)'},
    template='plotly_white'
)
fig.add_hline(
    y=1000000,
    line_dash="dash",
    line_color="red",
    annotation_text="Initial Capital Level",
    annotation_position="bottom right"
)
fig.update_layout(hovermode='x unified', yaxis_tickformat='$,.0f')
fig.show()
```

---

# Strategy Performance Analysis

```{python}
import numpy as np
import statsmodels.api as sm

# 计算基础指标
total_trades = len(blotter)
win_trades = (blotter['profit_percent'] > 0).sum()
loss_trades = (blotter['profit_percent'] < 0).sum()
win_rate = win_trades / total_trades if total_trades > 0 else 0
avg_win = blotter.loc[blotter['profit_percent'] > 0, 'profit_percent'].mean()
avg_loss = blotter.loc[blotter['profit_percent'] < 0, 'profit_percent'].mean()
profit_factor = (
    blotter.loc[blotter['profit_percent'] > 0, 'profit_percent'].sum() /
    abs(blotter.loc[blotter['profit_percent'] < 0, 'profit_percent'].sum())
) if loss_trades > 0 else float('inf')

# 回撤 & 夏普率
ledger['previous_peak'] = ledger['market_value'].cummax()
ledger['drawdown'] = (ledger['market_value'] - ledger['previous_peak']) / ledger['previous_peak']
max_drawdown = ledger['drawdown'].min()

returns = ledger['market_value'].pct_change().dropna()
sharpe_ratio = returns.mean() / returns.std() * np.sqrt(252)

# 新增指标
volatility = returns.std() * np.sqrt(252)
geo_mean_return = (ledger['market_value'].iloc[-1] / ledger['market_value'].iloc[0]) ** (
    1 / ((ledger['timestamp'].iloc[-1] - ledger['timestamp'].iloc[0]).days / 365)) - 1
avg_return_per_trade = blotter['profit_percent'].mean() / 100
total_days = (blotter['timestamp'].iloc[-1] - blotter['timestamp'].iloc[0]).days
avg_trades_per_year = len(blotter) * 365 / total_days

# alpha & beta (模拟 benchmark 为线性增长趋势)
benchmark_returns = np.linspace(0.001, 0.02, len(returns))
X = sm.add_constant(benchmark_returns)
model = sm.OLS(returns.values, X).fit()
alpha, beta = model.params

# 构造完整表格
metrics = pd.DataFrame({
    "Metric": [
        "Alpha (vs Benchmark)", "Beta (vs Benchmark)",
        "Volatility (Annualized)", "Geo Mean Rate of Return",
        "Sharpe Ratio", "Average Return per Trade",
        "Avg. Number of Trades per Year",

        "Total Trades", "Winning Trades", "Losing Trades",
        "Win Rate", "Average Profit", "Average Loss",
        "Profit Factor", "Maximum Drawdown"
    ],
    "Value": [
        f"{alpha:.4%}", f"{beta:.4f}",
        f"{volatility:.4%}", f"{geo_mean_return:.4%}",
        f"{sharpe_ratio:.4f}", f"{avg_return_per_trade:.4%}",
        f"{avg_trades_per_year:.2f}",

        total_trades, win_trades, loss_trades,
        f"{win_rate:.2%}", f"{avg_win:.2f}%", f"{avg_loss:.2f}%",
        f"{profit_factor:.2f}", f"{max_drawdown:.2%}"
    ]
})

from IPython.display import display, HTML
display(HTML("<h4>Performance Metrics</h4>" + metrics.to_html(index=False, classes="table table-hover")))
```

---

# Additional Performance Charts

```{python}
# Trade Type Distribution
action_counts = blotter['action'].value_counts().reset_index()
action_counts.columns = ['Trade Type', 'Count']

fig = px.pie(
    action_counts,
    values='Count',
    names='Trade Type',
    title='Trade Type Distribution',
    hole=0.3,
    template='plotly_white'
)
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')
fig.show()
```
---

# Analysis & Conclusion

Our candlestick pattern-enhanced MACD-ATR strategy delivered a **win rate of 39.32%** and a **profit factor of 1.19** across 412 trades. Although the winning percentage appears modest, the strategy effectively manages risk by ensuring that average profits per winning trade (+1.01%) consistently outweigh average losses (-0.55%). This asymmetry, combined with CNN-driven pattern recognition and multi-signal confirmations, allows the strategy to tolerate frequent small losses while capturing meaningful trend-based gains. The approach emphasizes **trend validation, risk control, and dynamic adaptation to volatility**.

From a risk-return perspective, the strategy achieves a **geometric mean return of 51.32% annualized**, albeit with a **maximum drawdown of -12.43%**. The equity curve exhibits moderate volatility, reflected in an **annualized volatility of 13.34%**, resulting in a **Sharpe ratio of 0.5714**. While this Sharpe ratio suggests room for improvement in risk-adjusted returns, the system demonstrates resilience by avoiding large equity erosions even during adverse market phases. The use of **ATR-based trailing stops** and **confirmation filters** plays a critical role in smoothing the return profile and protecting capital.

Overall, this project demonstrates that **deep learning-enhanced technical analysis** can substantially improve trade timing and decision quality without overfitting to historical data. Although the current model prioritizes **signal accuracy and capital preservation** over aggressive profit maximization, future enhancements—such as **dynamic position sizing**, **multi-asset expansion**, and **reinforcement learning-based signal calibration**—could further improve Sharpe ratios and risk efficiency. Our results confirm the practical viability of hybrid models that combine **visual pattern recognition** and **quantitative indicator systems** in cryptocurrency trading.

---

# Raw Data Sample

```{python}
# OHLC Candlestick Sample
data = pd.DataFrame({
    "Open": [1.0854, 1.0861, 1.0870, 1.0878, 1.0884],
    "High": [1.0862, 1.0875, 1.0889, 1.0894, 1.0897],
    "Low": [1.0845, 1.0852, 1.0859, 1.0865, 1.0871],
    "Close": [1.0860, 1.0872, 1.0885, 1.0891, 1.0893],
    "Pattern": ["Hammer", "Doji", "Bullish Engulfing", "Morning Star", "Shooting Star"]
})
display(HTML("<h4>OHLC Pattern Sample</h4>" + data.to_html(index=False, classes="table table-striped")))
```
---

# Description: Walk the Reader Through a Trade

Let us walk through a representative BTC/USDT trade to illustrate how our candlestick-enhanced MACD-ATR strategy operates in practice. This process highlights how multiple signal confirmations and technical layers work together to manage risk and maximize opportunity.

## Trade Entry

At 15:00 UTC on March 12, 2025, the MACD histogram shifts from negative to positive territory, suggesting the early stage of an uptrend. At the same time, the price closes decisively above the EMA30, further validating bullish momentum. Meanwhile, our CNN-based pattern classifier identifies a **Morning Star** formation—an established bullish reversal signal—within the most recent 15-minute candle window.

To minimize false entries, our strategy requires **two consecutive CNN-confirmed bullish signals**. Once the second confirmation occurs at 15:15 UTC, all entry conditions are satisfied:

- MACD histogram > 0
- Price > EMA30
- CNN model predicts bullish pattern
- 2 consecutive confirmations

Thus, a long position is opened **at 15:15 UTC at a price of $66,240.78**. The strategy allocates **100% of capital ($1,000,000)** into the trade.

---

## Stop-Loss Protection

Upon entry, the Average True Range (ATR14) is measured at 157.12. The initial stop-loss is calculated as:

\[
\text{Stop-Loss} = 66,240.78 - (3.2 \times 157.12) = 65,737.97
\]

This trailing stop-loss will **dynamically adjust upward** as the trade progresses, allowing profits to be locked in while capping downside exposure.

---

## Trade Exit

Roughly 90 minutes later, at 16:45 UTC, the MACD histogram turns negative and the CNN classifier detects a **Shooting Star**—a bearish reversal pattern. The price also begins to drift toward the EMA30 line.

At 17:00 UTC, the second consecutive bearish CNN signal is confirmed. All exit conditions are now triggered:

- MACD histogram < 0
- Price trending below EMA30
- CNN model signals bearish pattern
- 2 consecutive confirmations

The strategy closes the position at **$66,809.87**, locking in a **+0.86% gain**, or **+$8,609.09** in absolute USD terms.

---

## Summary of Trade Dynamics

| Time (UTC) | Event                        | Indicator               | Action        | Price       |
|------------|------------------------------|--------------------------|---------------|-------------|
| 15:00      | MACD turns positive          | MACD                     | Entry signal  | —           |
| 15:15      | Morning Star confirmed twice | CNN + EMA + MACD         | Buy           | $66,240.78  |
| 17:00      | Shooting Star confirmed      | CNN + MACD + EMA         | Sell          | $66,809.87  |

This trade illustrates how **deep learning-enhanced visual signals** work synergistically with traditional indicators to identify profitable opportunities and manage risk. The hybrid approach enables **faster reaction to microstructure shifts** while preserving robustness through confirmation and volatility-aware exits.

:::{.cell}
<style>
/* 图片、表格、图表统一上下留空 */
img, table, .plotly-graph-div {
  margin-top: 20px;
  margin-bottom: 20px;
}

/* 缩小饼图大小 */
.plotly-graph-div .slice path {
  transform: scale(0.8); /* 80% 缩放 */
  transform-origin: center;
}
</style>
:::
